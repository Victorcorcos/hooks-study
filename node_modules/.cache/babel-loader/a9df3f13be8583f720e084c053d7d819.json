{"ast":null,"code":"\"use strict\";\n\nvar color = require(\"./color\");\n\nvar timesInWords = require(\"./util/core/times-in-words\");\n\nvar sinonFormat = require(\"./util/core/format\");\n\nvar sinonMatch = require(\"./match\");\n\nvar jsDiff = require(\"diff\");\n\nvar push = Array.prototype.push;\n\nfunction colorSinonMatchText(matcher, calledArg, calledArgMessage) {\n  if (!matcher.test(calledArg)) {\n    matcher.message = color.red(matcher.message);\n\n    if (calledArgMessage) {\n      calledArgMessage = color.green(calledArgMessage);\n    }\n  }\n\n  return calledArgMessage + \" \" + matcher.message;\n}\n\nfunction colorDiffText(diff) {\n  var objects = diff.map(function (part) {\n    var text = part.value;\n\n    if (part.added) {\n      text = color.green(text);\n    } else if (part.removed) {\n      text = color.red(text);\n    }\n\n    if (diff.length === 2) {\n      text += \" \"; // format simple diffs\n    }\n\n    return text;\n  });\n  return objects.join(\"\");\n}\n\nmodule.exports = {\n  c: function (spyInstance) {\n    return timesInWords(spyInstance.callCount);\n  },\n  n: function (spyInstance) {\n    return spyInstance.toString();\n  },\n  D: function (spyInstance, args) {\n    var message = \"\";\n\n    for (var i = 0, l = spyInstance.callCount; i < l; ++i) {\n      // describe multiple calls\n      if (l > 1) {\n        if (i > 0) {\n          message += \"\\n\";\n        }\n\n        message += \"Call \" + (i + 1) + \":\";\n      }\n\n      var calledArgs = spyInstance.getCall(i).args;\n\n      for (var j = 0; j < calledArgs.length || j < args.length; ++j) {\n        message += \"\\n\";\n        var calledArgMessage = j < calledArgs.length ? sinonFormat(calledArgs[j]) : \"\";\n\n        if (sinonMatch.isMatcher(args[j])) {\n          message += colorSinonMatchText(args[j], calledArgs[j], calledArgMessage);\n        } else {\n          var expectedArgMessage = j < args.length ? sinonFormat(args[j]) : \"\";\n          var diff = jsDiff.diffJson(calledArgMessage, expectedArgMessage);\n          message += colorDiffText(diff);\n        }\n      }\n    }\n\n    return message;\n  },\n  C: function (spyInstance) {\n    var calls = [];\n\n    for (var i = 0, l = spyInstance.callCount; i < l; ++i) {\n      var stringifiedCall = \"    \" + spyInstance.getCall(i).toString();\n\n      if (/\\n/.test(calls[i - 1])) {\n        stringifiedCall = \"\\n\" + stringifiedCall;\n      }\n\n      push.call(calls, stringifiedCall);\n    }\n\n    return calls.length > 0 ? \"\\n\" + calls.join(\"\\n\") : \"\";\n  },\n  t: function (spyInstance) {\n    var objects = [];\n\n    for (var i = 0, l = spyInstance.callCount; i < l; ++i) {\n      push.call(objects, sinonFormat(spyInstance.thisValues[i]));\n    }\n\n    return objects.join(\", \");\n  },\n  \"*\": function (spyInstance, args) {\n    return args.map(function (arg) {\n      return sinonFormat(arg);\n    }).join(\", \");\n  }\n};","map":{"version":3,"names":["color","require","timesInWords","sinonFormat","sinonMatch","jsDiff","push","Array","prototype","colorSinonMatchText","matcher","calledArg","calledArgMessage","test","message","red","green","colorDiffText","diff","objects","map","part","text","value","added","removed","length","join","module","exports","c","spyInstance","callCount","n","toString","D","args","i","l","calledArgs","getCall","j","isMatcher","expectedArgMessage","diffJson","C","calls","stringifiedCall","call","t","thisValues","arg"],"sources":["/Users/victorcosta/Desktop/repositories/react-project/hooks-study/node_modules/sinon/lib/sinon/spy-formatters.js"],"sourcesContent":["\"use strict\";\n\nvar color = require(\"./color\");\nvar timesInWords = require(\"./util/core/times-in-words\");\nvar sinonFormat = require(\"./util/core/format\");\nvar sinonMatch = require(\"./match\");\nvar jsDiff = require(\"diff\");\nvar push = Array.prototype.push;\n\nfunction colorSinonMatchText(matcher, calledArg, calledArgMessage) {\n    if (!matcher.test(calledArg)) {\n        matcher.message = color.red(matcher.message);\n        if (calledArgMessage) {\n            calledArgMessage = color.green(calledArgMessage);\n        }\n    }\n    return calledArgMessage + \" \" + matcher.message;\n}\n\nfunction colorDiffText(diff) {\n    var objects = diff.map(function (part) {\n        var text = part.value;\n        if (part.added) {\n            text = color.green(text);\n        } else if (part.removed) {\n            text = color.red(text);\n        }\n        if (diff.length === 2) {\n            text += \" \"; // format simple diffs\n        }\n        return text;\n    });\n    return objects.join(\"\");\n}\n\nmodule.exports = {\n    c: function (spyInstance) {\n        return timesInWords(spyInstance.callCount);\n    },\n\n    n: function (spyInstance) {\n        return spyInstance.toString();\n    },\n\n    D: function (spyInstance, args) {\n        var message = \"\";\n\n        for (var i = 0, l = spyInstance.callCount; i < l; ++i) {\n            // describe multiple calls\n            if (l > 1) {\n                if (i > 0) {\n                    message += \"\\n\";\n                }\n                message += \"Call \" + (i + 1) + \":\";\n            }\n            var calledArgs = spyInstance.getCall(i).args;\n            for (var j = 0; j < calledArgs.length || j < args.length; ++j) {\n                message += \"\\n\";\n                var calledArgMessage = j < calledArgs.length ? sinonFormat(calledArgs[j]) : \"\";\n                if (sinonMatch.isMatcher(args[j])) {\n                    message += colorSinonMatchText(args[j], calledArgs[j], calledArgMessage);\n                } else {\n                    var expectedArgMessage = j < args.length ? sinonFormat(args[j]) : \"\";\n                    var diff = jsDiff.diffJson(calledArgMessage, expectedArgMessage);\n                    message += colorDiffText(diff);\n                }\n            }\n        }\n\n        return message;\n    },\n\n    C: function (spyInstance) {\n        var calls = [];\n\n        for (var i = 0, l = spyInstance.callCount; i < l; ++i) {\n            var stringifiedCall = \"    \" + spyInstance.getCall(i).toString();\n            if (/\\n/.test(calls[i - 1])) {\n                stringifiedCall = \"\\n\" + stringifiedCall;\n            }\n            push.call(calls, stringifiedCall);\n        }\n\n        return calls.length > 0 ? \"\\n\" + calls.join(\"\\n\") : \"\";\n    },\n\n    t: function (spyInstance) {\n        var objects = [];\n\n        for (var i = 0, l = spyInstance.callCount; i < l; ++i) {\n            push.call(objects, sinonFormat(spyInstance.thisValues[i]));\n        }\n\n        return objects.join(\", \");\n    },\n\n    \"*\": function (spyInstance, args) {\n        return args.map(function (arg) { return sinonFormat(arg); }).join(\", \");\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}